<!--
	Configures Dianoga to support SVG
	
	By default this does not run any optimizer over SVGs, because SVGO, which seems to be the de facto library,
	requires Node.js and that isn't something that can ship with a NuGet package. See Dianoga.Svg.SVGO.config.disabled
	for directions to install and enable SVGO, if you want to use that to optimize the files as well.
	
	Without SVGO, this patch file will enable:
	* Storing SVGs in the media library without issue
	* Gzipping SVGs that are served from the media library (a very good optimization since SVG = XML and is thus highly compressible)
	
	What this does not enable:
	* Using SVGs in rich text editors
	* Rendering SVGs using field renderer that include height and width attributes on their <img> tag (note: you don't want this on responsive sites anyway)
	* If you care about the above and want to maintain the hacks needed to enable it, see http://sitecorecorner.com/2015/11/23/sitecore-svg-support/
	
	Props:
	SVG mime type config courtesy of Richard Seal, https://community.sitecore.net/developers/f/8/t/1670
	SVG compression courtesy of Anders Laub, https://laubplusco.net/compress-svg-images-sitecore-media-library/
	SVG error suppression courtesy of Kamruz Jaman, https://jammykam.wordpress.com/2015/11/18/svg-in-media-library-polluting-log-files-with-errors/
	All code used with permission of the authors.
-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
	<sitecore>
		<!-- Enable serving SVG from the media library -->
		<mediaLibrary>
			<mediaTypes>
				<mediaType name="SVG image" extensions="svg">
					<mimeType>image/svg+xml</mimeType>
					<forceDownload>false</forceDownload>
					<sharedTemplate>system/media/unversioned/image</sharedTemplate>
					<versionedTemplate>system/media/versioned/image</versionedTemplate>
				</mediaType>
			</mediaTypes>
		</mediaLibrary>

		<!-- INITIALIZE DIANOGA SVG OPTIMIZATION -->
		<pipelines>
			<dianogaOptimize>
				<processor type="Dianoga.Processors.Pipelines.DianogaOptimize.ExtensionBasedOptimizer, Dianoga" desc="svg">
					<Extensions>svg</Extensions>
					<Pipeline>dianogaOptimizeSvg</Pipeline>
				</processor>
			</dianogaOptimize>

			<!-- 
				DIANOGA OPTIMIZE SVG
				Pipeline that defines how SVGs get optimized. Multiple optimizers may run over the same file.
				Optimizers should derive from OptimizerProcessor or CommandLineToolOptimizer.
				
				Optimizers are expected to close the stream they receive under any circumstances!
			-->
			<dianogaOptimizeSvg>
				<!-- Optimize the SVG with SVGO https://github.com/svg/svgo -->
				<processor type="Dianoga.Optimizers.Pipelines.DianogaSvg.SvgoOptimizer, Dianoga">
					<ExePath>/App_Data/Dianoga Tools/SVGO/node.exe</ExePath>
					<!-- See https://github.com/svg/svgo#cli for arguments. removeUselessDefs and cleanupIDs are disabled because they eat SVG sprite-sheets -->
					<AdditionalToolArguments>--disable=removeUselessDefs --disable=cleanupIDs</AdditionalToolArguments>
				</processor>
			</dianogaOptimizeSvg>
		</pipelines>

		<!--- SVG COMPRESSION: auto gzip SVGs from media library on serve -->
		<pipelines>
			<dianogaOptimizeSvg>
				<!-- adds gzip compression to SVGs as an optimization. Make sure this is always LAST if used. -->
				<processor type="Dianoga.Optimizers.Pipelines.DianogaSvg.GzipSvgData, Dianoga" />
			</dianogaOptimizeSvg>

			<getMediaStream>
				<!-- Prevent Sitecore from attempting to resize SVGs as bitmaps -->
				<processor type="Dianoga.Svg.Pipelines.GetMediaStream.SvgIgnorer, Dianoga" patch:before="processor[1]" />
			</getMediaStream>
		</pipelines>

		<events>
			<!-- Adds the right HTTP header to tell the browser we're gzipping compressed media items when they are compressed -->
			<event name="media:request">
				<handler type="Dianoga.Svg.EventHandlers.MediaRequest.CompressedSvgEncodingSetter, Dianoga" method="OnMediaRequest" />
			</event>
		</events>
	</sitecore>
</configuration>